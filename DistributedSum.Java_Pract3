//Java Project - DistributedSumMPI
//Class- DistributedSum.Java

//add external jars----c:\mpjexpress\lib

//add env variable system PATH ---c:\mpjexpress\bin
//https://mpj-express.org/---download


import mpi.*;

public class DistributedSum {
    public static void main(String[] args) throws Exception {
        MPI.Init(args); // Initialize MPI
        int rank = MPI.COMM_WORLD.Rank();  // Process ID
        int size = MPI.COMM_WORLD.Size();  // Total number of processes

        // âœ… You can change the array here
        int[] fullArray = {
            5, 10, 15, 20, 25, 30, 35, 40,
            45, 50, 55, 60, 65, 70, 75, 80
        };

        int N = fullArray.length; // Total number of elements
        int localSize = N / size; // Elements per process (assumes N divisible by size)

        int[] localArray = new int[localSize]; // Each process receives this

        if (rank == 0) {
            System.out.print("Root process array: ");
            for (int val : fullArray) {
                System.out.print(val + " ");
            }
            System.out.println();
        }

        // Scatter full array to all processes
        MPI.COMM_WORLD.Scatter(
            fullArray, 0, localSize, MPI.INT,
            localArray, 0, localSize, MPI.INT,
            0
        );

        // ðŸ”’ Synchronized printing: each process prints one after another
        MPI.COMM_WORLD.Barrier();
        for (int i = 0; i < size; i++) {
            if (rank == i) {
                System.out.print("Process " + rank + " received: ");
                for (int val : localArray) {
                    System.out.print(val + " ");
                }
                System.out.println();
            }
            MPI.COMM_WORLD.Barrier(); // Wait for current to finish
        }

        // Each process computes local sum
        int localSum = 0;
        for (int val : localArray) {
            localSum += val;
        }

        // Print local sum (synchronized)
        MPI.COMM_WORLD.Barrier();
        for (int i = 0; i < size; i++) {
            if (rank == i) {
                System.out.println("Process " + rank + " computed local sum: " + localSum);
            }
            MPI.COMM_WORLD.Barrier();
        }

        // Gather all local sums at root
        int[] allSums = new int[size];
        MPI.COMM_WORLD.Gather(
            new int[]{localSum}, 0, 1, MPI.INT,
            allSums, 0, 1, MPI.INT,
            0
        );

        // Root calculates total sum
        if (rank == 0) {
            int totalSum = 0;
            System.out.print("Intermediate sums: ");
            for (int s : allSums) {
                System.out.print(s + " ");
                totalSum += s;
            }
            System.out.println("\nFinal total sum: " + totalSum);
        }

        MPI.Finalize(); // Finalize MPI
    }
}

//cmd-------cd C:\Users\User\eclipse-workspace\DistributedSumMPI\bin
mpjrun.bat -np 4 DistributedSum
